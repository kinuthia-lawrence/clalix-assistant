<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/clalix/clalixassistant/controllers/ChatTabController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/clalix/clalixassistant/controllers/ChatTabController.java" />
              <option name="originalContent" value="package com.clalix.clalixassistant.controllers;&#10;&#10;import javafx.scene.control.ListCell;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.layout.HBox;&#10;import javafx.scene.control.Label;&#10;import javafx.geometry.Pos;&#10;import javafx.scene.shape.Circle;&#10;import javafx.scene.paint.Color;&#10;import javafx.scene.layout.VBox;&#10;import javafx.scene.text.Text;&#10;import javafx.scene.text.TextFlow;&#10;import javafx.scene.Node;&#10;import com.clalix.clalixassistant.model.ChatMessage;&#10;import javafx.application.Platform;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.ListView;&#10;import javafx.scene.control.TextArea;&#10;import javafx.scene.control.Button;&#10;&#10;public class ChatTabController {&#10;    @FXML&#10;    private ListView&lt;ChatMessage&gt; messagesList;&#10;    @FXML&#10;    private TextArea inputArea;&#10;    @FXML&#10;    private Button sendButton;&#10;    @FXML&#10;    private Button suggestButton;&#10;    @FXML&#10;    private Button attachButton;&#10;    @FXML&#10;    private Button emojiButton;&#10;&#10;    private final ObservableList&lt;ChatMessage&gt; messages = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        messagesList.setItems(messages);&#10;        messagesList.setCellFactory(lv -&gt; new ListCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(ChatMessage m, boolean empty) {&#10;                super.updateItem(m, empty);&#10;                if (empty || m == null) {&#10;                    setGraphic(null);&#10;                } else {&#10;                    HBox root = new HBox(8);&#10;                    root.setPadding(new javafx.geometry.Insets(4, 12, 4, 12));&#10;                    VBox bubbleBox = new VBox(2);&#10;                    bubbleBox.setMaxWidth(520);&#10;                    Label msgLabel = new Label(m.getContent());&#10;                    msgLabel.setWrapText(true);&#10;                    msgLabel.getStyleClass().add(&quot;message-bubble&quot;);&#10;&#10;                    // Fancy tick icon&#10;                    ImageView tickIcon = new javafx.scene.image.ImageView(getClass().getResource(&quot;/images/tick.png&quot;).toExternalForm());&#10;                    tickIcon.setFitHeight(20);&#10;                    tickIcon.setFitWidth(20);&#10;                    tickIcon.setPreserveRatio(true);&#10;                    tickIcon.setSmooth(true);&#10;                    tickIcon.setStyle(&quot;-fx-effect: dropshadow(gaussian, #2B6CB0, 4, 0.3, 0, 1); -fx-padding: 0 0 0 8;&quot;);&#10;&#10;                    if (m.getRole() == ChatMessage.Role.USER) {&#10;                        root.setAlignment(Pos.CENTER_RIGHT);&#10;                        msgLabel.getStyleClass().add(&quot;user&quot;);&#10;                        Label initials = new Label(&quot;U&quot;);&#10;                        initials.setTextFill(Color.WHITE);&#10;                        // Add tick icon as child of bubbleBox for user&#10;                        bubbleBox.getChildren().addAll(msgLabel, tickIcon);&#10;                        root.getChildren().addAll(bubbleBox);&#10;                    } else {&#10;                        root.setAlignment(Pos.CENTER_LEFT);&#10;                        msgLabel.getStyleClass().add(&quot;assistant&quot;);&#10;                        Circle avatar = new Circle(18, Color.web(&quot;#e6eef8&quot;));&#10;                        Label initials = new Label(&quot;A&quot;);&#10;                        avatar.setStroke(Color.WHITE);&#10;                        // Add tick icon as child of bubbleBox for assistant (if needed)&#10;                        bubbleBox.getChildren().addAll(msgLabel);&#10;                        root.getChildren().addAll(avatar, bubbleBox);&#10;                    }&#10;                    Label meta = new Label(m.getFormattedTime());&#10;                    meta.setStyle(&quot;-fx-font-size: 10; -fx-text-fill: #888;&quot;);&#10;                    bubbleBox.getChildren().add(meta);&#10;                    setGraphic(root);&#10;                }&#10;            }&#10;        });&#10;        // Auto-scroll to bottom on new message&#10;        messages.addListener((javafx.collections.ListChangeListener&lt;ChatMessage&gt;) c -&gt; {&#10;            if (!messages.isEmpty()) {&#10;                Platform.runLater(() -&gt; messagesList.scrollTo(messages.size() - 1));&#10;            }&#10;        });&#10;        sendButton.setOnAction(e -&gt; sendMessage());&#10;        inputArea.setOnKeyPressed(e -&gt; {&#10;            switch (e.getCode()) {&#10;                case ENTER -&gt; {&#10;                    if (e.isShiftDown()) {&#10;                        inputArea.appendText(&quot;\n&quot;);&#10;                    } else if (e.isControlDown()) {&#10;                        sendMessage();&#10;                        e.consume();&#10;                    } else {&#10;                        sendMessage();&#10;                        e.consume();&#10;                    }&#10;                }&#10;                case SHIFT -&gt; {&#10;                    // do nothing&#10;                }&#10;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void sendMessage() {&#10;        String text = inputArea.getText().trim();&#10;        if (!text.isEmpty()) {&#10;            ChatMessage userMsg = new ChatMessage(ChatMessage.Role.USER, text);&#10;            messages.add(userMsg);&#10;            inputArea.clear();&#10;            // Show typing indicator (optional UI logic)&#10;            // Add a temporary system message or indicator if needed&#10;            // Run AI call in background&#10;            new Thread(() -&gt; {&#10;                String aiResponse = com.clalix.clalixassistant.service.GenerateTextFromTextInput.generateText(text);&#10;                Platform.runLater(() -&gt; {&#10;                    ChatMessage aiMsg = new ChatMessage(ChatMessage.Role.ASSISTANT, aiResponse);&#10;                    messages.add(aiMsg);&#10;                    // Hide typing indicator if used&#10;                });&#10;            }).start();&#10;        }&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.clalix.clalixassistant.controllers;&#10;&#10;import javafx.scene.control.ListCell;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.layout.HBox;&#10;import javafx.scene.control.Label;&#10;import javafx.geometry.Pos;&#10;import javafx.scene.shape.Circle;&#10;import javafx.scene.paint.Color;&#10;import javafx.scene.layout.VBox;&#10;import javafx.scene.text.Text;&#10;import javafx.scene.text.TextFlow;&#10;import javafx.scene.Node;&#10;import com.clalix.clalixassistant.model.ChatMessage;&#10;import javafx.application.Platform;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.ListView;&#10;import javafx.scene.control.TextArea;&#10;import javafx.scene.control.Button;&#10;&#10;public class ChatTabController {&#10;    @FXML&#10;    private ListView&lt;ChatMessage&gt; messagesList;&#10;    @FXML&#10;    private TextArea inputArea;&#10;    @FXML&#10;    private Button sendButton;&#10;    @FXML&#10;    private Button suggestButton;&#10;    @FXML&#10;    private Button attachButton;&#10;    @FXML&#10;    private Button emojiButton;&#10;&#10;    private final ObservableList&lt;ChatMessage&gt; messages = FXCollections.observableArrayList();&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        messagesList.setItems(messages);&#10;        messagesList.setCellFactory(lv -&gt; new ListCell&lt;&gt;() {&#10;            @Override&#10;            protected void updateItem(ChatMessage m, boolean empty) {&#10;                super.updateItem(m, empty);&#10;                if (empty || m == null) {&#10;                    setGraphic(null);&#10;                } else {&#10;                    HBox root = new HBox(8);&#10;                    root.setPadding(new javafx.geometry.Insets(4, 12, 4, 12));&#10;                    VBox bubbleBox = new VBox(2);&#10;                    bubbleBox.setMaxWidth(520);&#10;                    Label msgLabel = new Label(m.getContent());&#10;                    msgLabel.setWrapText(true);&#10;                    msgLabel.getStyleClass().add(&quot;message-bubble&quot;);&#10;&#10;                    // Fancy tick icon&#10;                    ImageView tickIcon = new javafx.scene.image.ImageView(getClass().getResource(&quot;/images/tick.png&quot;).toExternalForm());&#10;                    tickIcon.setFitHeight(20);&#10;                    tickIcon.setFitWidth(20);&#10;                    tickIcon.setPreserveRatio(true);&#10;                    tickIcon.setSmooth(true);&#10;                    tickIcon.setStyle(&quot;-fx-effect: dropshadow(gaussian, #2B6CB0, 4, 0.3, 0, 1); -fx-padding: 0 0 0 8;&quot;);&#10;&#10;                    if (m.getRole() == ChatMessage.Role.USER) {&#10;                        root.setAlignment(Pos.CENTER_RIGHT);&#10;                        msgLabel.getStyleClass().add(&quot;user&quot;);&#10;                        Label initials = new Label(&quot;U&quot;);&#10;                        initials.setTextFill(Color.WHITE);&#10;                        // Add tick icon as child of bubbleBox for user&#10;                        bubbleBox.getChildren().addAll(msgLabel, tickIcon);&#10;                        root.getChildren().addAll(bubbleBox);&#10;                    } else {&#10;                        root.setAlignment(Pos.CENTER_LEFT);&#10;                        msgLabel.getStyleClass().add(&quot;assistant&quot;);&#10;                        Circle avatar = new Circle(18, Color.web(&quot;#e6eef8&quot;));&#10;                        Label initials = new Label(&quot;A&quot;);&#10;                        avatar.setStroke(Color.WHITE);&#10;                        // Add tick icon as child of bubbleBox for assistant (if needed)&#10;                        bubbleBox.getChildren().addAll(msgLabel);&#10;                        root.getChildren().addAll(avatar, bubbleBox);&#10;                    }&#10;                    Label meta = new Label(m.getFormattedTime());&#10;                    meta.setStyle(&quot;-fx-font-size: 10; -fx-text-fill: #888;&quot;);&#10;                    bubbleBox.getChildren().add(meta);&#10;                    setGraphic(root);&#10;                }&#10;            }&#10;        });&#10;        // Auto-scroll to bottom on new message&#10;        messages.addListener((javafx.collections.ListChangeListener&lt;ChatMessage&gt;) c -&gt; {&#10;            if (!messages.isEmpty()) {&#10;                Platform.runLater(() -&gt; messagesList.scrollTo(messages.size() - 1));&#10;            }&#10;        });&#10;        sendButton.setOnAction(e -&gt; sendMessage());&#10;        inputArea.setOnKeyPressed(e -&gt; {&#10;            switch (e.getCode()) {&#10;                case ENTER -&gt; {&#10;                    if (e.isShiftDown()) {&#10;                        inputArea.appendText(&quot;\n&quot;);&#10;                    } else if (e.isControlDown()) {&#10;                        sendMessage();&#10;                        e.consume();&#10;                    } else {&#10;                        sendMessage();&#10;                        e.consume();&#10;                    }&#10;                }&#10;                case SHIFT -&gt; {&#10;                    // do nothing&#10;                }&#10;&#10;            }&#10;        });&#10;    }&#10;&#10;    private void sendMessage() {&#10;        String text = inputArea.getText().trim();&#10;        if (!text.isEmpty()) {&#10;            ChatMessage userMsg = new ChatMessage(ChatMessage.Role.USER, text);&#10;            messages.add(userMsg);&#10;            inputArea.clear();&#10;            // Show typing indicator (optional UI logic)&#10;            // Add a temporary system message or indicator if needed&#10;            // Run AI call in background&#10;            new Thread(() -&gt; {&#10;                String aiResponse = com.clalix.clalixassistant.service.GenerateTextFromTextInput.generateText(text);&#10;                Platform.runLater(() -&gt; {&#10;                    ChatMessage aiMsg = new ChatMessage(ChatMessage.Role.ASSISTANT, aiResponse);&#10;                    messages.add(aiMsg);&#10;                    // Hide typing indicator if used&#10;                });&#10;            }).start();&#10;        }&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/fxml/ChatTab.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/fxml/ChatTab.fxml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;?import javafx.scene.layout.BorderPane?&gt;&#10;&lt;?import javafx.scene.control.ListView?&gt;&#10;&lt;?import javafx.scene.control.TextArea?&gt;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;BorderPane xmlns:fx=&quot;http://javafx.com/fxml&quot; fx:controller=&quot;com.clalix.clalixassistant.controllers.ChatTabController&quot;&gt;&#10;    &lt;center&gt;&#10;        &lt;ListView fx:id=&quot;messagesList&quot; prefHeight=&quot;500&quot; /&gt;&#10;    &lt;/center&gt;&#10;    &lt;bottom&gt;&#10;        &lt;HBox spacing=&quot;8&quot; padding=&quot;12&quot;&gt;&#10;            &lt;Button fx:id=&quot;attachButton&quot; text=&quot;&quot;/&gt;&#10;            &lt;Button fx:id=&quot;emojiButton&quot; text=&quot;&quot;/&gt;&#10;            &lt;TextArea fx:id=&quot;inputArea&quot; promptText=&quot;Type your message...&quot; prefRowCount=&quot;1&quot; wrapText=&quot;true&quot;/&gt;&#10;            &lt;Button fx:id=&quot;sendButton&quot; text=&quot;Send&quot;/&gt;&#10;            &lt;Button fx:id=&quot;suggestButton&quot; text=&quot;AI Suggest&quot;/&gt;&#10;        &lt;/HBox&gt;&#10;    &lt;/bottom&gt;&#10;&lt;/BorderPane&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/fxml/NotesTab.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/fxml/NotesTab.fxml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;?import javafx.scene.layout.BorderPane?&gt;&#10;&lt;?import javafx.scene.control.TextArea?&gt;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.control.ChoiceBox?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;?import javafx.scene.layout.VBox?&gt;&#10;&lt;BorderPane xmlns:fx=&quot;http://javafx.com/fxml&quot; fx:controller=&quot;com.clalix.clalixassistant.controllers.NotesTabController&quot;&gt;&#10;    &lt;left&gt;&#10;        &lt;VBox spacing=&quot;8&quot; padding=&quot;12&quot;&gt;&#10;            &lt;TextArea fx:id=&quot;notesInput&quot; promptText=&quot;Paste notes or transcript here...&quot; prefRowCount=&quot;16&quot; wrapText=&quot;true&quot;/&gt;&#10;            &lt;HBox spacing=&quot;8&quot;&gt;&#10;                &lt;Button fx:id=&quot;summarizeButton&quot; text=&quot;Summarize&quot;/&gt;&#10;                &lt;ChoiceBox fx:id=&quot;modeChoice&quot;/&gt;&#10;                &lt;Button fx:id=&quot;exportButton&quot; text=&quot;Export&quot;/&gt;&#10;                &lt;Button fx:id=&quot;copyButton&quot; text=&quot;Copy&quot;/&gt;&#10;                &lt;Button fx:id=&quot;highlightButton&quot; text=&quot;Highlight&quot;/&gt;&#10;            &lt;/HBox&gt;&#10;        &lt;/VBox&gt;&#10;    &lt;/left&gt;&#10;    &lt;center&gt;&#10;        &lt;VBox spacing=&quot;8&quot; padding=&quot;12&quot;&gt;&#10;            &lt;TextArea fx:id=&quot;summaryOutput&quot; promptText=&quot;Summary will appear here...&quot; editable=&quot;false&quot; wrapText=&quot;true&quot;/&gt;&#10;            &lt;Label fx:id=&quot;summaryMeta&quot; text=&quot;Summary length: --&quot;/&gt;&#10;        &lt;/VBox&gt;&#10;    &lt;/center&gt;&#10;&lt;/BorderPane&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/fxml/TasksTab.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/fxml/TasksTab.fxml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;?import javafx.scene.layout.BorderPane?&gt;&#10;&lt;?import javafx.scene.control.TableView?&gt;&#10;&lt;?import javafx.scene.control.TableColumn?&gt;&#10;&lt;?import javafx.scene.control.TextField?&gt;&#10;&lt;?import javafx.scene.control.DatePicker?&gt;&#10;&lt;?import javafx.scene.control.ComboBox?&gt;&#10;&lt;?import javafx.scene.control.Button?&gt;&#10;&lt;?import javafx.scene.layout.HBox?&gt;&#10;&lt;BorderPane xmlns:fx=&quot;http://javafx.com/fxml&quot; fx:controller=&quot;com.clalix.clalixassistant.controllers.TasksTabController&quot;&gt;&#10;    &lt;top&gt;&#10;        &lt;HBox spacing=&quot;8&quot; padding=&quot;12&quot;&gt;&#10;            &lt;TextField fx:id=&quot;titleField&quot; promptText=&quot;Task Title&quot;/&gt;&#10;            &lt;DatePicker fx:id=&quot;deadlinePicker&quot;/&gt;&#10;            &lt;ComboBox fx:id=&quot;priorityBox&quot; promptText=&quot;Priority&quot;/&gt;&#10;            &lt;Button fx:id=&quot;addTaskButton&quot; text=&quot;Add Task&quot;/&gt;&#10;        &lt;/HBox&gt;&#10;    &lt;/top&gt;&#10;    &lt;center&gt;&#10;        &lt;TableView fx:id=&quot;tasksTable&quot;&gt;&#10;            &lt;columns&gt;&#10;                &lt;TableColumn fx:id=&quot;titleColumn&quot; text=&quot;Title&quot;/&gt;&#10;                &lt;TableColumn fx:id=&quot;deadlineColumn&quot; text=&quot;Deadline&quot;/&gt;&#10;                &lt;TableColumn fx:id=&quot;priorityColumn&quot; text=&quot;Priority&quot;/&gt;&#10;                &lt;TableColumn fx:id=&quot;statusColumn&quot; text=&quot;Status&quot;/&gt;&#10;                &lt;TableColumn fx:id=&quot;actionsColumn&quot; text=&quot;Actions&quot;/&gt;&#10;            &lt;/columns&gt;&#10;        &lt;/TableView&gt;&#10;    &lt;/center&gt;&#10;    &lt;right&gt;&#10;        &lt;VBox fx:id=&quot;previewPanel&quot; spacing=&quot;8&quot; padding=&quot;12&quot;/&gt;&#10;    &lt;/right&gt;&#10;&lt;/BorderPane&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>